# Polimorfismo

O polimorfismo é muito importante para a manutenção e clareza de código. Ela permite que classes filhas herdem métodos de uma classe pai, mas com suas próprias implementações. Isto faz com que as alterações feitas na classe pai atinjam todas as classes herdeiras, facilitando substancialmente a manutenção do código.

Por exemplo, consideremos as classes:
``class Funcionario {
``      protected String nome;
``      protected String cpf;
``      protected double salario;
  
``  public double getBonificacao() {
``      return this.salario * 0.10;
  }
  // métodos
}``

e

``class Gerente extends Funcionario {
      int senha;
      int numeroDeFuncionariosGerenciados;

  public double getBonificacao() {
      return this.salario * 0.15;
  }
}``

"Gerente" é uma classe herdeira de "Funcionário", com o método "getBonificação" sobrescrito ("Override").

Agora consideremos uma classe que faz o registro das bonificações dos funcionários:

``class ControleDeBonificacoes {
      private double totalDeBonificacoes = 0;

  public void registra(Funcionario funcionario) {
      this.totalDeBonificacoes += funcionario.getBonificacao();
  }

  public double getTotalDeBonificacoes() {
      return this.totalDeBonificacoes;
  }
}``

No momento de fazer o controle de bonificações, temos:

``ControleDeBonificacoes controle = new ControleDeBonificacoes();

Gerente funcionario1 = new Gerente();
funcionario1.setSalario(5000.0);
controle.registra(funcionario1);

Funcionario funcionario2 = new Funcionario();
funcionario2.setSalario(1000.0);
controle.registra(funcionario2);``

Como podemos perceber, a função "registra" é capaz de receber como argumento tanto objetos da classe "Funcionario" (pai) como objetos da classe "Gerente" (filha). Isto evita ter que criar duas funções diferentes - uma para cada classe -, facilitando assim a manutenção do código.

Outra coisa a salientar é que classes pai centralizam modificações em atributos/ métodos que são comuns a todas as classes filhas.